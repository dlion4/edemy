/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const TutorLazyImport = createFileRoute('/tutor')()
const TermsLazyImport = createFileRoute('/terms')()
const StudentLazyImport = createFileRoute('/student')()
const PrivacyLazyImport = createFileRoute('/privacy')()
const FaqLazyImport = createFileRoute('/faq')()
const CourseLazyImport = createFileRoute('/course')()
const ContactLazyImport = createFileRoute('/contact')()
const AuthLazyImport = createFileRoute('/auth')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TutorLazyRoute = TutorLazyImport.update({
  id: '/tutor',
  path: '/tutor',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tutor.lazy').then((d) => d.Route))

const TermsLazyRoute = TermsLazyImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/terms.lazy').then((d) => d.Route))

const StudentLazyRoute = StudentLazyImport.update({
  id: '/student',
  path: '/student',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/student.lazy').then((d) => d.Route))

const PrivacyLazyRoute = PrivacyLazyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/privacy.lazy').then((d) => d.Route))

const FaqLazyRoute = FaqLazyImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/faq.lazy').then((d) => d.Route))

const CourseLazyRoute = CourseLazyImport.update({
  id: '/course',
  path: '/course',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/course.lazy').then((d) => d.Route))

const ContactLazyRoute = ContactLazyImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))

const AuthLazyRoute = AuthLazyImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/course': {
      id: '/course'
      path: '/course'
      fullPath: '/course'
      preLoaderRoute: typeof CourseLazyImport
      parentRoute: typeof rootRoute
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyLazyImport
      parentRoute: typeof rootRoute
    }
    '/student': {
      id: '/student'
      path: '/student'
      fullPath: '/student'
      preLoaderRoute: typeof StudentLazyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsLazyImport
      parentRoute: typeof rootRoute
    }
    '/tutor': {
      id: '/tutor'
      path: '/tutor'
      fullPath: '/tutor'
      preLoaderRoute: typeof TutorLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/auth': typeof AuthLazyRoute
  '/contact': typeof ContactLazyRoute
  '/course': typeof CourseLazyRoute
  '/faq': typeof FaqLazyRoute
  '/privacy': typeof PrivacyLazyRoute
  '/student': typeof StudentLazyRoute
  '/terms': typeof TermsLazyRoute
  '/tutor': typeof TutorLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/auth': typeof AuthLazyRoute
  '/contact': typeof ContactLazyRoute
  '/course': typeof CourseLazyRoute
  '/faq': typeof FaqLazyRoute
  '/privacy': typeof PrivacyLazyRoute
  '/student': typeof StudentLazyRoute
  '/terms': typeof TermsLazyRoute
  '/tutor': typeof TutorLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/auth': typeof AuthLazyRoute
  '/contact': typeof ContactLazyRoute
  '/course': typeof CourseLazyRoute
  '/faq': typeof FaqLazyRoute
  '/privacy': typeof PrivacyLazyRoute
  '/student': typeof StudentLazyRoute
  '/terms': typeof TermsLazyRoute
  '/tutor': typeof TutorLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/auth'
    | '/contact'
    | '/course'
    | '/faq'
    | '/privacy'
    | '/student'
    | '/terms'
    | '/tutor'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/auth'
    | '/contact'
    | '/course'
    | '/faq'
    | '/privacy'
    | '/student'
    | '/terms'
    | '/tutor'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/auth'
    | '/contact'
    | '/course'
    | '/faq'
    | '/privacy'
    | '/student'
    | '/terms'
    | '/tutor'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  AuthLazyRoute: typeof AuthLazyRoute
  ContactLazyRoute: typeof ContactLazyRoute
  CourseLazyRoute: typeof CourseLazyRoute
  FaqLazyRoute: typeof FaqLazyRoute
  PrivacyLazyRoute: typeof PrivacyLazyRoute
  StudentLazyRoute: typeof StudentLazyRoute
  TermsLazyRoute: typeof TermsLazyRoute
  TutorLazyRoute: typeof TutorLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  AuthLazyRoute: AuthLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  CourseLazyRoute: CourseLazyRoute,
  FaqLazyRoute: FaqLazyRoute,
  PrivacyLazyRoute: PrivacyLazyRoute,
  StudentLazyRoute: StudentLazyRoute,
  TermsLazyRoute: TermsLazyRoute,
  TutorLazyRoute: TutorLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/auth",
        "/contact",
        "/course",
        "/faq",
        "/privacy",
        "/student",
        "/terms",
        "/tutor"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/auth": {
      "filePath": "auth.lazy.tsx"
    },
    "/contact": {
      "filePath": "contact.lazy.tsx"
    },
    "/course": {
      "filePath": "course.lazy.tsx"
    },
    "/faq": {
      "filePath": "faq.lazy.tsx"
    },
    "/privacy": {
      "filePath": "privacy.lazy.tsx"
    },
    "/student": {
      "filePath": "student.lazy.tsx"
    },
    "/terms": {
      "filePath": "terms.lazy.tsx"
    },
    "/tutor": {
      "filePath": "tutor.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
